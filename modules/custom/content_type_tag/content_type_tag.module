<?php
define("CONTENT_TAGS_VID", 3);
define("PRIVATE_TAGS_VID", 8);
define("TWEET_TAGS_VID", 100);

function content_type_tag_views_default_views() {
  return views_install_view_dir('content_type_tag');
}

/**
 * Implementation of hook_init().
 *
 * Makes sure the right files have been loaded.
 */
function content_type_tag_init() {
//  module_load_include('inc', 'img_cap_tax_fld', 'img_cap_tax_fld_widget');
//  module_load_include('inc', 'img_cap_tax_fld', 'img_cap_tax_fld_field');
}

/**
 * Implementation of hook_field_info().
 */
function content_type_tag_field_info() {
  return array(
    'content_type_tag' => array(
      'label' => t('Content Type matched by Tag'),
      'description' => t('Stores a Content Type, a tag, and a number to limit matched items'),
    )
  );
}

/**
 * Implementation of hook_field_settings().
 */
function content_type_tag_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['content_type']    = array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => TRUE, 'default' => '');
      $columns['private_tags']    = array('type' => 'varchar', 'length' => 1024, 'not null' => FALSE, 'sortable' => TRUE, 'default' => '');
      $columns['public_tags']     = array('type' => 'varchar', 'length' => 1024, 'not null' => FALSE, 'sortable' => TRUE, 'default' => '');
      $columns['tweet_tags']      = array('type' => 'varchar', 'length' => 1024, 'not null' => FALSE, 'sortable' => TRUE, 'default' => '');
      $columns['content_limit']   = array('type' => 'varchar', 'length' => 10, 'not null' => FALSE, 'sortable' => TRUE, 'default' => '');
      return $columns;
//    case 'form':
//      return content_type_tag_field_settings_form( $field );
//    case 'save':
//      return content_type_tag_field_settings_save( $field );
//    default:
      //TODO Need default function
      //return filefield_field_settings( $op, $field );
  }
}

/**
 * Implementation of hook_field().
 */
function content_type_tag_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      //TODO Validate functionality here
     break;

    case 'sanitize':
      //TODO sanitize functionality here
      break;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function content_type_tag_content_is_empty($item, $field) {
  if (empty($item['content_type'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_widget_info().
 */
function content_type_tag_widget_info() {
  return array(
    'content_type_tag_widget' => array(
      'label' => t('Content Type and Tag'),
      'field types' => array('content_type_tag'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_elements().
 */
function content_type_tag_elements() {
  $elements = array('content_type_tag_widget' =>
    array(
      '#input' => TRUE,
      '#process' => array('content_type_tag_widget_process'),
    ),
  );

  return $elements;
}

/**
 * Process callback for widget
 *
 * Returns a Forms API array that defines the widget's editing form.
 */
function content_type_tag_widget_process($element, $edit, &$form_state, $form) {

  $defaults = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  //call hook content_type_tag_types
  //This must return an array of content types with the form [content_type] => 'content_type_name'
  $content_type_options = array();
  foreach (module_implements('content_type_tag_types') as $module) {
    $content_types = module_invoke($module, 'content_type_tag_types', $element);
    if (!empty($content_types)) {
      $content_type_options = array_merge($content_type_options, $content_types);
    }
  }

  $element['content_type'] = array(
    '#title' => t('Content Type'),
    '#type' => 'select',
    '#options' => $content_type_options,
    '#default_value' => $defaults['content_type'],
    '#weight' => 1,
    '#attributes' => array(
      'class' => 'content-type',
      'onchange' => "
        if (this.value == 'tweet') {
          $(this).parent().parent().find('.tweet-tags-wrapper').show();
        }
        else {
          $(this).parent().parent().find('.tweet-tags-wrapper').hide();
        }
      ",
    ),
  );

  $element['public_tags'] = array(
    '#title' => t('Content Tags'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'taxonomy/autocomplete/' . CONTENT_TAGS_VID,
    '#default_value' => $defaults['public_tags'],
    '#weight' => 2,
    '#maxlength' => 1024,
    '#attributes' => array(
      'class' => 'content-tags',
    ),
  );

  $tweet_display = ($defaults['content_type'] == 'tweet') ? 'block' : 'none';
  $element['tweet_tags'] = array(
    '#title' => t('Tweet Tags'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'taxonomy/autocomplete/' . TWEET_TAGS_VID,
    '#default_value' => $defaults['tweet_tags'],
    '#weight' => 2,
    '#maxlength' => 1024,
    '#attributes' => array(
      'class' => 'tweet-tags',
    ),
    '#prefix' => '<div class="tweet-tags-wrapper" style="display:' . $tweet_display . '">',
    '#suffix' => '</div>',
  );

  $element['private_tags'] = array(
    '#title' => t('Private Tags'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'taxonomy/autocomplete/' . PRIVATE_TAGS_VID,
    '#default_value' => $defaults['private_tags'],
    '#weight' => 3,
    '#maxlength' => 1024,
    '#attributes' => array(
      'class' => 'private-tags',
    ),
  );

  if (!empty($defaults['content_limit'])) {
    $content_limit_default = $defaults['content_limit'];
  }
  else {
    $content_limit_default = 10;
  }

  $element['content_limit'] = array(
    '#title' => t('Max items to display'),
    '#type' => 'textfield',
    '#default_value' => $content_limit_default,
    '#value' => $content_limit_default,
    '#weight' => 4,
  );
  return $element;
}

/**
 * Implementation of hook_theme().
 */
function content_type_tag_theme() {
  return array(
    'content_type_tag_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'content_type_tag_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_content_type_tag_widget($element) {
  return $element['#children'];
}

/**
 * Implementation of hook_widget().
 */
function content_type_tag_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 *
 * Returns information about available field formatters.
 */
function content_type_tag_field_formatter_info() {
  return array(
    'default' => array(
       'label' => t('Content Type Matched by Tag'),
       'field types' => array('content_type_tag'),
    ),
  );
}

/**
 * Theme function for default formatter.
 */
function theme_content_type_tag_formatter_default($element = NULL) {

  $ret .= '<div>HELLO CCK</div>';

  return $ret;
}

/**
 * Preprocess content_podgroup_group_list_group_tags
 */
function content_type_tag_preprocess_content_podgroup(&$vars) {
  if ($vars['element']['#group_name'] == 'group_list_group_tags') {

    $nids = content_type_tag_get_nodes($vars['field_list_group_tags'], '', TRUE);
    foreach ($nids as $nid) {
      $field_list_node_item_list_group['nid'] = $nid;

      $tpl_vars = array(
        '#type' => 'content_podgroup',
        '#group_name' => 'group_list_item',
        '#region' => $vars['element']['#region'],
        'element' => array(
          'field' => array(
            'items' => array(
              1 => array(
                '#item' => array(
                  '#group_name' => 'group_pod_list_node_item',
                  '#region' => $vars['element']['#region'],
                ),
              ),
            ),
          ),
        ),
        'parent' => array(
	  'field' => array(
	    'items' => array(
	      1 => array(
	        '#item' => array(
                  'field_pod_list_group_display' => $vars['field_list_group_display'],
		  
                  'field_list_group_tags_more_link' => $vars['field_list_group_tags_m'],
		  
                  'field_list_group_tags_show_date' => $vars['field_list_group_tags_show_date'],
		  
		),
	      ),
	    ),
	  ),
	),
	
        'field_pod_l_n_i_list_group' => array(
          'field' => array(
            'items' => array(
              1 => array(
                '#item' => array(
                  'nid' => $nid,
                ),
              ),
            ),
          ),
        ),
      );


      $children .= theme('content_podgroup', $tpl_vars, NULL);
      $vars['children'] = $children;

    }
  }
}

/**
 * Based on selections of the passed in $field return array of nids.
 */
function content_type_tag_get_nodes($field, $extra = null, $show_all = FALSE) {
  $private_tags = content_type_tag_get_tag_array(PRIVATE_TAGS_VID, $field['private_tags']);
  $content_tags = content_type_tag_get_tag_array(CONTENT_TAGS_VID, $field['public_tags']);

  $tweet_tags   = content_type_tag_get_tag_array(TWEET_TAGS_VID, $field['tweet_tags']);
  $all_tags     = array_merge($private_tags, $content_tags, $tweet_tags);

  $nids = _content_type_tag_get_nodes($field['content_type'], $all_tags, $field['content_limit'], $extra,$show_all);
  return $nids;
}

/**
 * Return array of tag tids that match the given names and vocabulary.
 */
function content_type_tag_get_tag_array($vid, $tags_name_array) {
  //get tag tids
  $tags_array = explode(',', $tags_name_array);
  $terms = array();

  if (!empty($tags_array)) {
    $tags_array = array_map('trim', $tags_array);
    $sql = "select tid from {term_data} where vid = ".$vid." and name in (";
    $sql .= implode(',', array_fill(0, count($tags_array), "'%s'"));
    $sql .= ");";

    $result = db_query($sql, $tags_array);
    while($row = db_fetch_array($result)) {
      $terms[] = $row['tid'];
    }
  }
  return $terms;
}

/**
 * Get nodes with given tags.
 */
function _content_type_tag_get_nodes($content_type, $tags_id_array, $limit, $extra = NULL, $show_all = FALSE) {

  $term_string = implode('+', $tags_id_array);

  // get nids
  $nids = array();
  $view = views_get_view('content_type_tag_nodes');

  if(empty($term_string)){
    $term_string = '0';
  }

  if (is_object($view)) {
    //get display from content type
    //NOTE: to add content type sorting add a new display to view with name matching content type
    $display_id = 'default';
    foreach($view->display as $display) {
      if ($display->display_title == $content_type) {
        $display_id = $display->id;
        break;
      }
    }

    if ($show_all && empty($term_string)) {
      $view->set_arguments(array($content_type, NULL));
    }
    else {
      $view->set_arguments(array($content_type, $term_string));
    }

    $view->set_display($display_id);
    $view->display_handler->set_option('items_per_page', $limit);
    $view->pre_execute();
    $view->execute();

    // Temporary variable $counter added to work around 
    // the items_per_page option wich isn't working
    $counter = 1;

    foreach($view->result as $result) {
      $nids[] = $result->nid;

      if(!empty($limit) && $counter++ == $limit)
      {
        break;
      }
    }

  }

  return $nids;
}

/**
 * hook_form_alter().
 */
function content_type_tag_form_alter(&$form, &$form_state, $form_id) {
  // #34827
  if ($form_id == 'press_kit_node_form') {
    $form['#after_build'][] = 'press_kit_node_form_after_build';
  }
}

function press_kit_node_form_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module','content_type_tag') . '/content_type_tag.js');
  return $form;
}

