<?php
function ddp_perm() {
  return array('administer ddp', 'ddp_file', 'ddp_file_admin');
}

function ddp_file_download($file) {
  global $user;
  $perm = false;
  if($user->uid == 1 || in_array('ddp_file_admin', $user->roles)) {
    $perm = true;
  } else {
    
    $sql = "select n.status, f.filemime 
            from node n 
            join content_type_document d on d.nid = n.nid and d.vid = n.vid
            join files f on f.fid = d.field_document_file_fid
            where f.filepath = 'sites/default/files/%s'
            limit 1";

    $result = db_fetch_array(db_query($sql, (string)$file));

    if(!is_array($result['status'] == 1)){


      $sql = "select n.status, f.filemime 
              from node n 
              join content_type_ddp_image d on d.nid = n.nid and d.vid = n.vid
              join files f on f.fid = d.field_ddp_image_image_fid
              where f.filepath = 'sites/default/files/%s'
              limit 1";
      $result = db_fetch_array(db_query($sql, (string)$file));
    }

  }
  if(!is_array($result['status'] == 1) || $perm) {
    return array('Content-type: '. $result['filemime']);
  } else {
    return -1;
  }
}

function ddp_menu() {
  $items = array();

  $items['admin/settings/ddp'] = array(
    'title' => 'DDP Integration Settings',
    'description' => 'Global settings for Drupal/DDP Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddp_settings_form'),
    'access callback' => 'ddp_access',
    'type' => MENU_NORMAL_ITEM
  );
  $items['system/files/ddp_file'] = array(
    'access callback' => 'ddp_file_access',
    'page callback' => 'file_download',
    'page arguments' => array('ddp_file'),
    'type' =>  MENU_CALLBACK,
  );

  return $items;
}

function ddp_settings_form($form_state) {
  $form['ddp_user'] = array(
    '#type' => 'textfield', 
    '#title' => t('DDP user'), 
    '#default_value' =>  variable_get('ddp_user', ''), 
    '#description' => t('DDP User'),
  );
  $form['ddp_oauth_key'] = array(
    '#type' => 'textfield', 
    '#title' => t('DDP oauth key'), 
    '#default_value' =>  variable_get('ddp_oauth_key', ''), 
    '#description' => t('Key for oauth access to DDP'),
  );
  $form['ddp_oauth_secret'] = array(
    '#type' => 'textfield', 
    '#title' => t('DDP oauth secret'), 
    '#default_value' =>  variable_get('ddp_oauth_secret', ''), 
    '#description' => t('Secret key for DDP oauth.'),
  );
  $form['ddp_ddp_url'] = array(
    '#type' => 'textfield', 
    '#title' => t('DDP URL'), 
    '#default_value' =>  variable_get('ddp_ddp_url', ''), 
    '#description' => t('URL to DDP'),
  );

  return system_settings_form($form);
}

function ddp_access() {
  return user_access('administer ddp');
}

function ddp_file_access() {
  if(user_access('ddp_file') || user_access('ddp_file_admin')) {
    return true;
  }
}

/**
 * get ddp oauth url, and change the request object to reflect oauth 
 */
function _ddp_connect_get_auth_url(&$request, $params, $fullpath){
  module_load_include('inc', 'ddp', 'oauth/oauth'); 

  // -1 day, overlap is ok, just make sure that with all of the time zone differences that we have updated data
  $params['updated_since'] = date('c', (strtotime($params['updated_since']) - 7200));
  
  // Establish an OAuth consumer based on our admin 'credentials'
  $CONSUMER_KEY = variable_get('ddp_oauth_key', '');
  $CONSUMER_SECRET = variable_get('ddp_oauth_secret', '');
  $consumer = new OAuthConsumer($CONSUMER_KEY, $CONSUMER_SECRET, NULL);
  
  // Setup OAuth request based our previous credentials and query
  $user = variable_get('ddp_user', '');
  if($fullpath === TRUE) {
    $base_feed = $request;
  } else {
    $base_feed = variable_get('ddp_ddp_url', '').'/'.$request;
  }

  $params['xoauth_requestor_id'] = $user;
  $request = OAuthRequest::from_consumer_and_token($consumer, NULL, 'GET', $base_feed, $params);
  
  // Sign the constructed OAuth request using HMAC-SHA1
  $request->sign_request(new OAuthSignatureMethod_HMAC_SHA1(), $consumer, NULL);

  // Make signed OAuth request to the Contacts API server
  $url = $base_feed . '?' . implode_assoc('=', '&', $params);

  return $url;
}


/**
 * Connect to the DDP
 */
function ddp_connect($request, $params = array(), $fullpath = FALSE) {
  $url = _ddp_connect_get_auth_url($request, $params, $fullpath);
  $request = send_request($request->get_normalized_http_method(), $url, $request->to_header());

  //echo $request;exit;
  return $request;
}

function ddp_asset_list($params = array(), $download_thumbnail = false) {
  $params['page'] = 1;
  //$params['distribution_list_name'] = 'drupal';  
  $params['include_conversions'] = 'true';
  $per_page = 10;
  $params['per_page'] = $per_page;
  
  $results = array();
  while(1) {
    $assets = ddp_connect('assets.xml', $params);
    $result_array = _xml2Array('',$assets);

    if(is_array($result_array['artifacts'])) {
      if($result_array['artifacts']['artifact']['id']) {
        $results[] = $result_array['artifacts']['artifact'];
      } else {
        $results = array_merge($results, $result_array['artifacts']['artifact']);
      }
    }

    if(count($result_array['artifacts']['artifact']) < $per_page) {
      break;
    } else {
      $params['page']++;
    }
  }

  return $results;
}

/**
 * if thumbnail image exists save it to thumbnails directory in files folder
 */
function _ddp_file_save_thumbnail($download_url, $auth = true, $style = 'preview'){
  $url = trim($download_url);

  $request = $url;
  $params = array('style' => $style);

  if ($auth) {
    $url = _ddp_connect_get_auth_url($request, $params, true);

    $response = send_request($request->get_normalized_http_method(), $url, $request->to_header());
    //ddp redirects to get files, but switches auth methods. PHP won't allow this in one request
    // so we must check for the redirect warning, and do it manually!!!
    if(substr($response, 0, 25) == '<html><body>You are being'){
      $pattern = '/(<html><body>You are being <a href=\")(.*)(\">redirected<\/a>\.<\/body><\/html>)/';
      preg_match($pattern, $response, $matches);
      $image_url = str_replace('&amp;', '&', $matches[2]);
      $imageresponse = send_request($request->get_normalized_http_method(), $image_url);

      //return false if no thumbnail
      if(strpos($imageresponse, '<Error>') !== false){
        return false;
      }

      //get filename
      $filename = substr($image_url, 0, strpos($image_url, '?'));
      $filename = substr($filename, strrpos($filename, '/')+1);


      //write file to tmp folder on disk if file exists
      $filepath = '/tmp/' . $filename;
      $fp = fopen($filepath, 'w');
      fwrite($fp, $imageresponse);
      fclose($fp);

      $drupal_file = _ddp_file_save($filepath, 'thumbnails');
    }
  }
  else {
    //get filename
    $filename = substr($url, 0, strpos($url, '?'));
    $filename = substr($filename, strrpos($filename, '/')+1);
    //write file to tmp folder on disk if file exists
    $filepath = '/tmp/' . $filename;
    $image_file = file_get_contents($url);
    $fp = fopen($filepath, 'w');
    fwrite($fp, $image_file);
    fclose($fp);

    $drupal_file = _ddp_file_save($filepath, 'thumbnails');
  }
  return $drupal_file;

}


function _ddp_file_save($filepath, $dest = '', $uid = 0)
{
  global $user;

  $dest = 'sites/default/files/ddp_file/'.$dest;

  // Add in our check of the the file name length.
  $validators['file_validate_name_length'] = array();

  // Build the list of non-munged extensions.
  // @todo: this should not be here. we need to figure out the right place.
  $extensions = '';
  foreach ($user->roles as $rid => $name) {
    $extensions .= ' '. variable_get("upload_extensions_$rid",
    variable_get('upload_extensions_default', 'jpg jpeg gif png txt html doc xls pdf ppt pps odt ods odp'));
  }

  // Begin building file object.
  $file = new stdClass();
  if(!$uid) {
    $file->uid = $user->uid;
  }
  else {
    $file->uid = $uid;
  }
  $file->filename = basename($filepath);
  $file->filepath = $filepath;
  $file->filemime = module_exists('mimedetect') ? mimedetect_mime($file) : file_get_mimetype($file->filename);

  // Rename potentially executable files, to help prevent exploits.
  if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
    $file->filemime = 'text/plain';
    $file->filepath .= '.txt';
    $file->filename .= '.txt';
  }

  // If the destination is not provided, or is not writable, then use the
  // temporary directory.
  if (empty($dest) || file_check_path($dest) === FALSE) {
    $dest = file_directory_temp();
  }

  $file->source = 'field_file_save_file';
  $file->destination = file_destination(file_create_path($dest .'/'. $file->filename), FILE_EXISTS_RENAME);
  $file->filesize = filesize($filepath);

  // Call the validation functions.
  $errors = array();
  foreach ($validators as $function => $args) {
    array_unshift($args, $file);
    $errors = array_merge($errors, call_user_func_array($function, $args));
  }

  // Check for validation errors.
  if (!empty($errors)) {
    $message = t('The selected file %name could not be saved.', array('%name' => $file->filename));
    if (count($errors) > 1) {
      $message .= '<ul><li>'. implode('</li><li>', $errors) .'</li></ul>';
    }
    else {
      $message .= ' '. array_pop($errors);
    }
    //form_set_error($file->source, $message);
    return $message;
  }

  if (!file_copy($file, $file->destination, FILE_EXISTS_RENAME)) {
    form_set_error($file->source, t('File upload error. Could not move uploaded file.'));
    watchdog('file', 'Upload error. Could not move file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $file->destination));
    return 0;
  }

  // If we made it this far it's safe to record this file in the database.
  $file->status = FILE_STATUS_PERMANENT;
  $file->timestamp = time();
  // Insert new record to the database.
  drupal_write_record('files', $file);

  // Let modules add additional properties to the yet barebone file object.
  foreach (module_implements('file_insert') as $module) {
    $function =  $module .'_file_insert';
    $function($file);
  }
  _field_file_cache($file); // cache the file in order to minimize load queries
  return (array)$file;
}


function _xml2Array($xpath = "/*", $xml_data = "", $context_node = NULL) {
  static $xml;
  static $xp;
  
  // Add /* to the end of $xpath if it's not there
  if (!ereg("/\*$", $xpath))
    $xpath = ereg_replace("/*$", "", $xpath) . "/*";
  
  // Create out temporary array that we'll use to build the final array piece by piece
  $tmp_array = array();
  
  // If this is our first time in this function, initialize the DOM objects
  if ($xml_data)
    {
      $xml = new DOMDocument;
      $xml->loadXML($xml_data);
      $xp = new DOMXPath($xml);
    }

  //echo '<br><br>XML OUTPUT...................';
  //print $xml->saveXML();
  //echo '<br><br><br>';

  // Get the appropriate nodes for the current path
  $nodelist = ($context_node) ? $xp->query($xpath, $context_node) : $xp->query($xpath);
  
  // This variable is used to keep track of how many times a node with the same name
  // has appeared.  It puts the appropriate count after each one.  ie: [<nodeName>][<count>]
  $counter = array();
  
  // Loop through the current list of nodes
  // If there is more than one child node in the current node with the same name,
  // create a sub array for them and add a counter.
  // E.g. [<element>] = <value>  would become [<element>][0] = <value1> and [<element>][1] = <value2>
  foreach ($nodelist AS $node)
    {
      $counter[$node->nodeName] = (isset($counter[$node->nodeName])) ? $counter[$node->nodeName] + 1 : 0;
      
      if ($xp->evaluate('count(./*)', $node) > 0)
        {
          if ($xp->evaluate('count('.$node->nodeName.')', $node->parentNode) > 1)
            $tmp_array[$node->nodeName][$counter[$node->nodeName]] = _xml2Array($node->nodeName."[".($counter[$node->nodeName]+1)."]", "", $node->parentNode);
          else
            $tmp_array[$node->nodeName] = _xml2Array($node->nodeName, "", $node->parentNode);
        }
      else
        {
          if ($xp->evaluate('count('.$node->nodeName.')', $node->parentNode) > 1)
            $tmp_array[$node->nodeName][$counter[$node->nodeName]] = $node->nodeValue;
          else
            $tmp_array[$node->nodeName] = $node->nodeValue;
        }
    }
  
  return $tmp_array;
}
