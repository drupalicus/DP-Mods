<?php
/**
 * implementation of hook_form_alter
 */
function digitaria_utility_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    case 'content_copy_import_form':
      $form['#submit'] = array('digitaria_utility_content_copy_form_submit');
    break;
  }
}

/********
/ Programmatically creates roles in Drupal using provided array
/ $roles: array of role names. e.g.: array("role1", "role2");
/
/********/
function digitaria_utility_create_roles($roles = array()) {

  $current_roles = user_roles();
  $roles_to_create = array();
  foreach($roles as $role) {
    if (!in_array($role, $current_roles)) {
      $roles_to_create[] = $role;
    }
  }

  if(count($roles_to_create) < 1) {
    return false;
  } else {
    foreach($roles_to_create as $role) {
      require_once(drupal_get_path('module', 'user') . "/user.admin.inc");

      $form_id = "user_admin_new_role";
      $form_values = array();
      $form_values["name"] = $role;
      $form_values["op"] = t('Add role');
      $form_state = array();
      $form_state["values"] = $form_values;

      $q = $_GET['q'];
      $_GET['q'] = "";
      $result = drupal_execute($form_id, $form_state);
      $_GET['q'] = $q;
    }

    return true;
  }
}

function cck_install_content_dir($module, $dir = 'content_types', $ext = 'content') {
  module_load_include('inc', 'install_profile_api', 'contrib/content_copy');
  $content_types = content_types();
  $files = file_scan_directory(drupal_get_path('module', $module) . '/' . $dir, "\.${ext}$");
  foreach ($files as $file) {
    $type = $file->name;

    // The import will be populate into the $content variable.
    $content = array();

    //load the contents of the file into $content
    ob_start();
    include $file->filename;
    $content = ob_get_contents();
    ob_end_clean();

    //if this is a new content type
    if (!node_get_types('type', $type)) {
      $form_state['values']['type_name'] = '<create>';
      $form_state['values']['macro'] = $content;
      $form_state['values']['op'] = t('Import');
      $is_new = true;
    }
    // if this is an existing content type
    else{
      $form_state['values']['type_name'] = $type;
      $form_state['values']['macro'] = $content;
      $is_new = false;
    }

    $form_state['do_update'] = true;
    drupal_execute('content_copy_import_form', $form_state);

    content_clear_type_cache();
    drupal_set_message('Created '.$type.' content type.');
  }
}


function views_install_view_dir($module, $dir = 'default_views', $ext = 'view') {
  //module_load_include('inc', 'install_profile_api', 'contrib/content_copy');
  $views = array();
  $files = file_scan_directory(drupal_get_path('module', $module) . '/' . $dir, "\.${ext}$");

  foreach ($files as $file) {
    $handle = fopen($file->filename, 'r');
    $view_code = fread($handle, filesize($file->filename));
    fclose($handle);
    //eval($view_code);
    $views[$view->name] = $view;
  }

  return $views;
}


function digitaria_utility_install_imagecache($module, $dir = 'imagecache', $ext = 'imagecache') {
  $importedpresets = array();
  $files = file_scan_directory(drupal_get_path('module', $module) . '/' . $dir, "\.${ext}$");

  foreach ($files as $file) {
    $handle = fopen($file->filename, 'r');
    $view_code = fread($handle, filesize($file->filename));
    fclose($handle);
    eval($view_code);
    $importedpresets = array_merge((array)$importedpresets, (array)$presets);
  }

  return $importedpresets;
}

/**
 * look for default contexts directory and return the exported code
 */
function digitaria_utility_install_context_dir($module, $dir = 'contexts', $ext = 'context') {
  $contexts = array();
  $files = file_scan_directory(drupal_get_path('module', $module) . '/' . $dir, "\.${ext}$");

  foreach ($files as $file) {
    $handle = fopen($file->filename, 'r');
    $context_code = fread($handle, filesize($file->filename));
    fclose($handle);
    eval($context_code);
    $contexts[$context->name] = $context;
  }

  return $contexts;
}

/**
 *  sort given arrays by the name field
 */
function digitaria_uitlity_sort_by_name($a, $b) {
  return strcasecmp($a['name'], $b['name']);
}

/**
 * convert db result to array of rows
 * I feel like there is an existing function that does this
 */
function digitaria_uitlity_get_dbresult_as_array($result){
  $arr = array();
  while($row = db_fetch_array($result)) {
    $arr[] = $row;
  }

  return $arr;
}

/**
 * takes an array and returns html with $numcol ul lists
 * each row is themed by $theme_function
 */
function digitaria_utility_split_array_to_ul($array, $numcol, $theme_function){
  $arr = array();

  if($theme_function == 'digi_blog_contributors_link_list')
    usort($array,digitaria_uitlity_sort_array_titles);

  //create array with $numcol columns
  for($x=0; $x<count($array); $x++){
    $arr[$x % $numcol] .= theme($theme_function, $array[$x] , true);
  }

  //create html $content, wrapping array content in ul tags
  $content = '';
  for($x=0; $x<count($arr); $x++){
    $content .= '<ul>' . $arr[$x] . '</ul>';
  }

  return $content;
}

function digitaria_uitlity_sort_array_titles($a, $b)
{
    if ($a['title'] == $b['title']) {
        return 0;
    }
    return ($a['title'] < $b['title']) ? -1 : 1;
}


// I can't spell
function digitaria_uitlity_split_array_to_ul($array, $numcol, $theme_function){
  return digitaria_utility_split_array_to_ul($array, $numcol, $theme_function);
}

/**
 * take an array and reorder so it can be displayed in columns vertical instead of horizonal
 * This is to be used when you have a list that should be ordered vertially in columns, but you need to
 * display it horizonally first
 * USE AT YOUR OWN RISK
 */
function digitaria_utility_array_pivot($array, $numcol){
  //split array into $nulcom chunks evenly
  $count = ceil(count($array) / $numcol);
  $arr = array_chunk($array, $count);
  $ret_array = array();

  //merge the two lists in the new order
  for($index=0; $index<$count; $index++){
    for($top_index=0; $top_index<$numcol; $top_index++){
      if(!empty($arr[$top_index][$index])){
        $ret_array[] = $arr[$top_index][$index];
      }
    }
  }

  return $ret_array;
}

function digitaria_utility_unix_path() {
  $args = func_get_args();
  $paths = array();
  foreach( $args as $arg ) {
    $paths = array_merge( $paths, (array)$arg );
  }
  foreach( $paths as &$path ) {
    $path = trim( $path, '/' );
  }
  if( substr( $args[0], 0, 1 ) == '/' ) {
    $paths[0] = '/' . $paths[0];
  }
  return join('/', $paths);
}

function _event_date_format($start, $end, $show_year = true) {
  $start_timestamp = $start;
  $end_timestamp = $end;
  $start_day = date('j', $start_timestamp);
  $end_day = date('j', $end_timestamp);
  $start_month = date('M', $start_timestamp);
  $end_month = date('M', $end_timestamp);
  $start_year = date('Y', $start_timestamp);
  $end_year = date('Y', $end_timestamp);

  if($start_day == $end_day && $start_month == $end_month && $start_year == $end_year)
    {
      $end_day = '';
    }
  elseif($start_month == $end_month && $start_year == $end_year)
    {
      $end_day = '-'.$end_day;
    }
  $show_end_month = false;
  if($start_year == $end_year)
    {
      $start_year = '';
      $end_year = date(', Y', $end_timestamp);
    }
  else
    {
      $show_end_month = true;
      $start_year = date(', Y', $start_timestamp);
      $end_year = date(', Y', $end_timestamp);
    }
  if($start_month == $end_month && !$show_end_month)
    {
      $end_month = '';
    }
  else
    {
      $end_month = date('â€“M ', $end_timestamp);
    }

  if($show_year == false){
    $start_year = '';
    $end_year = '';
  }
  $dates = $start_month.' '.$start_day.$start_year.$end_month.$end_day.$end_year;

  return $dates;
}

/**
 * returns an array with all countries
 */
function digitaria_utility_get_country_array(){
  $countries = array(
    "AF"=>"Afghanistan",
    "AL"=>"Albania",
    "DZ"=>"Algeria",
    "AD"=>"Andorra",
    "AO"=>"Angola",
    "AI"=>"Anguilla",
    "AQ"=>"Antarctica",
    "AG"=>"Antigua and Barbuda",
    "AR"=>"Argentina",
    "AM"=>"Armenia",
    "AW"=>"Aruba",
    "AU"=>"Australia",
    "AT"=>"Austria",
    "AZ"=>"Azerbaijan",
    "BS"=>"Bahamas",
    "BH"=>"Bahrain",
    "BD"=>"Bangladesh",
    "BB"=>"Barbados",
    "BY"=>"Belarus",
    "BE"=>"Belgium",
    "BZ"=>"Belize",
    "BJ"=>"Benin",
    "BM"=>"Bermuda",
    "BT"=>"Bhutan",
    "BO"=>"Bolivia",
    "BA"=>"Bosnia and Herzegovina",
    "BW"=>"Botswana",
    "BR"=>"Brazil",
    "IO"=>"British Indian Ocean",
    "BN"=>"Brunei",
    "BG"=>"Bulgaria",
    "BF"=>"Burkina Faso",
    "BI"=>"Burundi",
    "KH"=>"Cambodia",
    "CM"=>"Cameroon",
    "CA"=>"Canada",
    "CV"=>"Cape Verde",
    "KY"=>"Cayman Islands",
    "CF"=>"Central African Republic",
    "TD"=>"Chad",
    "CL"=>"Chile",
    "CN"=>"China",
    "CX"=>"Christmas Island",
    "CC"=>"Cocos (Keeling) Islands",
    "CO"=>"Colombia",
    "KM"=>"Comoros",
    "CD"=>"Congo, Democratic Republic of the",
    "CG"=>"Congo, Republic of the",
    "CK"=>"Cook Islands",
    "CR"=>"Costa Rica",
    "HR"=>"Croatia",
    "CY"=>"Cyprus",
    "CZ"=>"Czech Republic",
    "DK"=>"Denmark",
    "DJ"=>"Djibouti",
    "DM"=>"Dominica",
    "DO"=>"Dominican Republic",
    "TL"=>"East Timor",
    "EC"=>"Ecuador",
    "EG"=>"Egypt",
    "SV"=>"El Salvador",
    "GQ"=>"Equatorial Guinea",
    "ER"=>"Eritrea",
    "EE"=>"Estonia",
    "ET"=>"Ethiopia",
    "FK"=>"Falkland Islands (Malvinas)",
    "FO"=>"Faroe Islands",
    "FJ"=>"Fiji",
    "FI"=>"Finland",
    "FR"=>"France",
    "GF"=>"French Guiana",
    "PF"=>"French Polynesia",
    "GA"=>"Gabon",
    "GM"=>"Gambia",
    "GE"=>"Georgia",
    "DE"=>"Germany",
    "GH"=>"Ghana",
    "GI"=>"Gibraltar",
    "GR"=>"Greece",
    "GL"=>"Greenland",
    "GD"=>"Grenada",
    "GP"=>"Guadeloupe",
    "GT"=>"Guatemala",
    "GN"=>"Guinea",
    "GW"=>"Guinea-Bissau",
    "GY"=>"Guyana",
    "HT"=>"Haiti",
    "HN"=>"Honduras",
    "HK"=>"Hong Kong",
    "HU"=>"Hungary",
    "IS"=>"Iceland",
    "IN"=>"India",
    "ID"=>"Indonesia",
    "IE"=>"Ireland",
    "IL"=>"Israel",
    "IT"=>"Italy",
    "CI"=>"Ivory Coast (C&ocirc;te d\'Ivoire)",
    "JM"=>"Jamaica",
    "JP"=>"Japan",
    "JO"=>"Jordan",
    "KZ"=>"Kazakhstan",
    "KE"=>"Kenya",
    "KI"=>"Kiribati",
    "KR"=>"Korea, South",
    "KW"=>"Kuwait",
    "KG"=>"Kyrgyzstan",
    "LA"=>"Laos",
    "LV"=>"Latvia",
    "LB"=>"Lebanon",
    "LS"=>"Lesotho",
    "LI"=>"Liechtenstein",
    "LT"=>"Lithuania",
    "LU"=>"Luxembourg",
    "MO"=>"Macau",
    "MK"=>"Macedonia, Republic of",
    "MG"=>"Madagascar",
    "MW"=>"Malawi",
    "MY"=>"Malaysia",
    "MV"=>"Maldives",
    "ML"=>"Mali",
    "MT"=>"Malta",
    "MH"=>"Marshall Islands",
    "MQ"=>"Martinique",
    "MR"=>"Mauritania",
    "MU"=>"Mauritius",
    "YT"=>"Mayotte",
    "MX"=>"Mexico",
    "FM"=>"Micronesia",
    "MD"=>"Moldova",
    "MC"=>"Monaco",
    "MN"=>"Mongolia",
    "ME"=>"Montenegro",
    "MS"=>"Montserrat",
    "MA"=>"Morocco",
    "MZ"=>"Mozambique",
    "NA"=>"Namibia",
    "NR"=>"Nauru",
    "NP"=>"Nepal",
    "NL"=>"Netherlands",
    "AN"=>"Netherlands Antilles",
    "NC"=>"New Caledonia",
    "NZ"=>"New Zealand",
    "NI"=>"Nicaragua",
    "NE"=>"Niger",
    "NG"=>"Nigeria",
    "NU"=>"Niue",
    "NF"=>"Norfolk Island",
    "NO"=>"Norway",
    "OM"=>"Oman",
    "PK"=>"Pakistan",
    "PS"=>"Palestinian Territory",
    "PA"=>"Panama",
    "PG"=>"Papua New Guinea",
    "PY"=>"Paraguay",
    "PE"=>"Peru",
    "PH"=>"Philippines",
    "PN"=>"Pitcairn Island",
    "PL"=>"Poland",
    "PT"=>"Portugal",
    "QA"=>"Qatar",
    "RE"=>"R&eacute;union",
    "RO"=>"Romania",
    "RU"=>"Russia",
    "RW"=>"Rwanda",
    "SH"=>"Saint Helena",
    "KN"=>"Saint Kitts and Nevis",
    "LC"=>"Saint Lucia",
    "PM"=>"Saint Pierre and Miquelon",
    "VC"=>"Saint Vincent and the Grenadines",
    "WS"=>"Samoa",
    "SM"=>"San Marino",
    "ST"=>"S&atilde;o Tome and Principe",
    "SA"=>"Saudi Arabia",
    "SN"=>"Senegal",
    "RS"=>"Serbia",
    "CS"=>"Serbia and Montenegro",
    "SC"=>"Seychelles",
    "SL"=>"Sierra Leon",
    "SG"=>"Singapore",
    "SK"=>"Slovakia",
    "SI"=>"Slovenia",
    "SB"=>"Solomon Islands",
    "SO"=>"Somalia",
    "ZA"=>"South Africa",
    "GS"=>"South Georgia and the South Sandwich Islands",
    "ES"=>"Spain",
    "LK"=>"Sri Lanka",
    "SR"=>"Suriname",
    "SJ"=>"Svalbard and Jan Mayen",
    "SZ"=>"Swaziland",
    "SE"=>"Sweden",
    "CH"=>"Switzerland",
    "TW"=>"Taiwan",
    "TJ"=>"Tajikistan",
    "TZ"=>"Tanzania",
    "TH"=>"Thailand",
    "TG"=>"Togo",
    "TK"=>"Tokelau",
    "TO"=>"Tonga",
    "TT"=>"Trinidad and Tobago",
    "TN"=>"Tunisia",
    "TR"=>"Turkey",
    "TM"=>"Turkmenistan",
    "TC"=>"Turks and Caicos Islands",
    "TV"=>"Tuvalu",
    "UG"=>"Uganda",
    "UA"=>"Ukraine",
    "AE"=>"United Arab Emirates",
    "GB"=>"United Kingdom",
    "US"=>"United States",
    "UM"=>"United States Minor Outlying Islands",
    "UY"=>"Uruguay",
    "UZ"=>"Uzbekistan",
    "VU"=>"Vanuatu",
    "VA"=>"Vatican City",
    "VE"=>"Venezuela",
    "VN"=>"Vietnam",
    "VG"=>"Virgin Islands, British",
    "WF"=>"Wallis and Futuna",
    "EH"=>"Western Sahara",
    "YE"=>"Yemen",
    "ZM"=>"Zambia",
    "ZW"=>"Zimbabwe");
  return $countries;
}

/**
 * gets file extension from string (text after last ".")
 */
function digitaria_utility_get_extension_from_string($filename){
  $doc_loc = strrpos($filename, '.');
  $extension = substr($filename, $doc_loc+1);
  return $extension;
}

/**
 * gets nid from url_alias path if the path src is "node/[nid]"
 */
function digitaria_utility_get_nid_from_url_alas($url){
  $nid = null;
  $path = drupal_lookup_path('source', substr($url, 1));
  if(substr($path, 0, 5) == 'node/'){
    $nid = substr($path, 5);
  }
  return $nid;
}


/**
 * @param int $timestamp UNIX timestamp
 * @param string $long_format PHP date format
 * @return Formatted Date string
 *  time <  1 hour   =>  "17 minutes"
 *  time >= 1 hour   =>  "17 hours"
 *  time >= 24 hours =>  "4 days"
 *  time >= 7 days   =>  "2 weeks"
 *  time >= 21 days  =>  "Mon, YYYY"
 */
function digi_date($timestamp, $long_format='M j, Y') {
    $output = "";
    $now = time();

    if ($timestamp <= ($now - (60 * 60 * 24 * 21))) {
        // >=21 days
        $output = date($long_format,$timestamp);
    } elseif($timestamp <= ($now - (60 * 60 * 24 * 7))) {
        // >=7 days
        $weeks = ($now - $timestamp) / (60 * 60 * 24 * 7);
        $weeks = number_format($weeks,0);
        if ($weeks == 1) {
            $output = $weeks. " week ago";
        } else {
            $output = $weeks. " weeks ago";
        }
    } elseif($timestamp <= ($now - (60 * 60 * 24))) {
        // >=24 hours
        $days = ($now - $timestamp) / (60 * 60 * 24);
        $days = number_format($days,0);
        if ($days == 1) {
            $output = $days. " day ago";
        } else {
            $output = $days. " days ago";
        }
    } elseif($timestamp <= ($now - (60 * 60))) {
        // >=1 hour
        $hours = ($now - $timestamp) / (60 * 60);
        $hours = number_format($hours,0);
        if ($hours == 1) {
            $output = $hours. " hour ago";
        } else {
            $output = $hours. " hours ago";
        }
    } elseif($timestamp > ($now - (60 * 60))) {
        // <1 hour
        $minutes = ($now - $timestamp) / (60);
        $minutes = number_format($minutes,0);
        if ($minutes == 1) {
            $output = $minutes. " minute ago";
        } else {
            $output = $minutes. " minutes ago";
        }
    } else {
        // Invalid Date
        $output = $timestamp;
    }

    return $output;
}

/**
 * @param string $key array key/index
 * @param array $input PHP array
 * @return Value of specific key/index of input array
 *  Mimics Ruby/Prototype pluck() function
 */
function digi_array_pluck($key, $input) {
  if (is_array($key) || !is_array($input)) return array();
  $array = array();
  foreach($input as $v) {
    if (array_key_exists($key, $v))
      $array[] = $v[$key];
  }
  return $array;
}

/**
 * get vocabulary object by name
 */
function digitaria_utility_get_vocab_by_name($name){
  $vocabs = taxonomy_get_vocabularies();
  foreach($vocabs as $vocab){
    if($vocab->name == $name){
      break;
    }
  }

  return $vocab;
}

/**
 * take a value, trim off excess whitespace and wrap it in single quotes.
 * This function is good for use with array_map when creating sql where clauses
 */
function digitaria_utility_where_in_clean($value){
  return "'" . trim($value) . "'";
}

/**
 * Return Formatted File Size
 */
function digitaria_filesize($file) {
  if (!file_exists($file)) { return false; }

  $size = filesize($file);

  if ($size < 1024) {
    return $size.' B';
  } else if($size < pow(1024,2)) {
    return ceil($size/1024).' KB';
  } else if($size < pow(1024,3)) {
    return number_format($size/pow(1024,2),1).' MB';
  } else {
    return number_format($size/pow(1024,3),1).' GB';
  }
}

/**
 * CREATE an imagecache image, return its RELATIVE path
 */
function digitaria_utility_theme() {
  return array(
    'digitaria_imagecache' => array(
      'arguments' => array(
        'namespace' => NULL,
        'path' => NULL,
        'alt' => NULL,
        'title' => NULL,
      ),
    ),
  );
}
function theme_digitaria_imagecache($presetname, $path, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE) {
  // Check is_null() so people can intentionally pass an empty array of
  // to override the defaults completely.
  if (is_null($attributes)) {
    $attributes = array('class' => 'imagecache imagecache-'. $presetname);
  }
  if ($getsize && ($image = image_get_info(imagecache_create_path($presetname, $path)))) {
    $attributes['width'] = $image['width'];
    $attributes['height'] = $image['height'];
  }
  if (!file_exists(file_create_path() .'/imagecache/'. $presetname .'/'. _imagecache_strip_file_directory($path))) {
    digitaria_imagecache_apply_preset($presetname, $path);
  }
  $attributes = drupal_attributes($attributes);
  $imagecache_path = imagecache_create_path($presetname, $path);
  return '<img src="/'. $imagecache_path .'" alt="'. check_plain($alt) .'" title="'. check_plain($title) .'" '. $attributes .' />';

}
/**
 * CREATE an imagecache preset without displaying it, return its path
 */
function digitaria_imagecache_apply_preset($presetname, $path) {

  if (!$preset = imagecache_preset_by_name($presetname)) {
    // Send a 404 if we don't know of a preset.
    return NULL;
  }

  // umm yeah deliver it early if it is there. especially useful
  // to prevent lock files from being created when delivering private files.
  $dst = imagecache_create_path($preset['presetname'], $path);
  if (is_file($dst)) {
    return $dst;
  }

  // preserve path for watchdog.
  $src = $path;

  // Check if the path to the file exists.
  if (!is_file($src) && !is_file($src = file_create_path($src))) {
    watchdog('digi imagecache', '404: Unable to find %image ', array('%image' => $src), WATCHDOG_ERROR);
    return NULL;
  };

  // Bail if the requested file isn't an image you can't request .php files
  // etc...
  if (!getimagesize($src)) {
    watchdog('digi imagecache', '403: File is not an image %image ', array('%image' => $src), WATCHDOG_ERROR);
    return NULL;
  }

  $lockfile = file_directory_temp() .'/'. $preset['presetname'] . basename($src);
  if (file_exists($lockfile)) {
    watchdog('digi imagecache', 'ImageCache already generating: %dst, Lock file: %tmp.', array('%dst' => $dst, '%tmp' => $lockfile), WATCHDOG_NOTICE);
    return NULL;
  }

  touch($lockfile);
  // register the shutdown function to clean up lock files. by the time shutdown
  // functions are being called the cwd has changed from document root, to
  // server root so absolute paths must be used for files in shutdown functions.
  register_shutdown_function('file_delete', realpath($lockfile));

  // check if deriv exists... (file was created between apaches request handler and reaching this code)
  // otherwise try to create the derivative.

  if (file_exists($dst) || imagecache_build_derivative($preset['actions'], $src, $dst)) {
    return $dst;
  }
  // Generate an error if image could not generate.
  watchdog('digi imagecache', 'Failed generating an image from %image using imagecache preset %preset.', array('%image' => $path, '%preset' => $preset['presetname']), WATCHDOG_ERROR);
  return NULL;
}

/**
 * take a date string from the server time and convert it to utc
 */
function digitaria_utility_convert_date_string_to_utc($datestring){
  // First get the user's (or system default) timezone info
  $user_timezone_name = date_default_timezone_name(TRUE);

  // Convert the user entered date into a PHP 5 DateTime object
  $local_date = new DateTime($datestring);

  // Reformat the user entered date into an ISO date that date_make_date() will accept
  $iso_date_string = date_format_date($local_date, 'custom', 'Y-m-d\TH:i:s');

  // Create a DateTime object with the user's timezone info
  $utc_date = date_make_date($iso_date_string, $user_timezone_name, DATE_DATETIME);

  // Change the timezone to UTC
  date_timezone_set($utc_date, timezone_open('UTC'));

  // Format the UTC version of the DateTime for use in node->save()
  $utc_date_string = date_format_date($utc_date, 'custom', 'Y-m-d\TH:i:s');
  return $utc_date_string;
}


/**
 * Disable a CCK Field
 */
function _cck_field_disable(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      // Recurse through all children elements.
      _cck_field_disable($elements[$key]);
    }
  }
  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}

/**
 * Find out if the current page is a node page.
 * @return TRUE if the page is a node, FALSE if it is another page.
 */
function digitaria_is_node_page() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * create a block programatically. This is a substitute for saving the block configure page
 * @param $values is an array of replacement values for the 'values' array submitted
 */
function digitaria_utility_configure_block($module, $delta, $theme, $values = array()){

  //if this block is new insert it
  $sql = "select status, weight, region, visibility, pages, custom, throttle, title from {blocks} where module = '%s' and delta = '%s' and theme = '%s';";
  if(!($row = db_fetch_array(db_query($sql, $module, $delta, $theme)))){

    db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, visibility, pages, custom, throttle, title)
      VALUES ('%s', '%s', '%s', %d, %d, '%s', %d, '%s', %d, %d, '%s')",
      $module, $delta, $theme, $status, $weight, $region, $visibility, $pages, $custom, $throttle, $title);

    //default values
    $status = 0;
    $weight = 0;
    $region = '';
    $visibility = 0;
    $pages = '';
    $custom = 0;
    $throttle = 0;
    $title = '';
  }
  //otherwise set the default values
  else{
    $status = $row['status'];
    $weight = $row['weight'];
    $region = $row['region'];
    $visibility = $row['visibility'];
    $pages = $row['pages'];
    $custom = $row['custom'];
    $throttle = $row['throttle'];
    $title = $row['title'];
  }

  //get existing blocks_roles
  $roles = array();
  $sql = "select rid from blocks_roles where module = '%s' and delta = '%s';";
  $result = db_query($sql, $module, $delta);
  while($row = db_fetch_array($result)){
    $roles[$row['rid']] = $row['rid'];
  }

  module_load_include('inc', 'block', 'block.admin');

  $form = array();

  $form_state = array();
  //set default values
  $form_state['values']['module'] = $module;
  $form_state['values']['delta'] = $delta;
  $form_state['values']['title'] = $title;
  $form_state['values']['visibility'] = $visibility;
  $form_state['values']['pages'] = $pages;
  $form_state['values']['custom'] = $custom;
  $form_state['values']['roles'] = $roles;

  //allow for override of default values, and extra module defined values
  foreach($values as $key => $val){
    $form_state['values'][$key] = $val;
  }

  block_admin_configure_submit($form, $form_state);
}

/**
 * submit override for content_copy form to allow updating of existing fields
 * http://drupal.org/node/634832
 */
function digitaria_utility_content_copy_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];

  // Get the content type we are importing into.
  $type_name = $form_values['type_name'];
  $type_label = node_get_types('name', $type_name);

  $content = NULL;
  // Convert the import formatted text back into a $content array.
  // Return if errors generated or not an array.
  // Use '@' to suppress errors about undefined constants in the macro.
  @eval($form_values['macro']);

  // Preliminary error trapping, must have valid arrays to work with.
  if (!isset($content) || !isset($content['type']) || !is_array($content) || !is_array($content['type'])) {
    form_set_error('macro', t('The import data is not valid import text.'));
    return;
  }

  module_load_include('inc', 'content', 'includes/content.crud');

  // Get all type and field info for this database.
  $content_info = _content_type_info();

  $imported_type = $content['type'];
  $imported_type_name = $imported_type['type'];
  $imported_type_label = $imported_type['name'];

  // It is allowed to import a type with no fields,
  // so the fields array could be empty and must be cast as an array.
  $imported_fields = isset($content['fields']) ? $content['fields'] : array();

  // Perform more pre-import error trapping.
  // If there are potential problems, exit without doing the import.
  $not_enabled = array();

  // The groups array could be empty and still valid, make sure to cast it as an array.
  // If there are groups in the import, make sure the fieldgroup module is enabled.
  $imported_groups = array();
  if (isset($content['groups']) && module_exists('fieldgroup')) {
    $imported_groups = (array) $content['groups'];
  }
  elseif (isset($content['groups']) && is_array($content['groups'])) {
    $not_enabled[] = 'fieldgroup';
  }

  // Make sure that all the field and widget modules in the import are enabled in this database.
  foreach ($imported_fields as $import) {
    $field = content_field_instance_collapse($import);
    if (empty($field['module']) || empty($field['widget_module'])) {
      $not_enabled[] = $field['field_name'];
    }
    else {
      if (!module_exists($field['module'])) {
        $not_enabled[] = $field['module'];
      }
      if (!module_exists($field['widget_module'])) {
        $not_enabled[] = $field['widget_module'];
      }
    }
  }

  // If any required module is not enabled, set an error message and exit.
  if ($not_enabled) {
    form_set_error('macro', t('The following modules must be enabled for this import to work: %modules.', array(
        '%modules' => implode(', ', array_unique($not_enabled))
        )));
  }

  // Make sure the imported content type doesn't already exist in the database.
  if ($form_values['type_name'] == '<create>') {
    if (in_array($imported_type_name, array_keys($content_info['content types']))) {
      form_set_error('macro', t('The content type %type already exists in this database.', array(
            '%type' => $imported_type_name
            )));
    }
  }

  if (form_get_errors()) {
    drupal_set_message(t('Exiting. No import performed.'), 'error');
    return;
  }

  // Create the content type, if requested.
  if ($form_values['type_name'] == '<create>') {

    $type = (object) $imported_type;
    $values = $imported_type;
    // Prevent a warning in node/content_types.inc
    $type->has_title = TRUE;
    $type_form_state = array('values' => $values);

    // There's no API for creating node types, we still have to use drupal_execute().
    drupal_execute('node_type_form', $type_form_state, $type);

    // Reset type and database values once new type has been added.
    $type_name  = $imported_type_name;
    $type_label = node_get_types('name', $type_name);
    content_clear_type_cache();
    $content_info = _content_type_info();

    if (form_get_errors() || !isset($content_info['content types']) || !is_array($content_info['content types'][$type_name])) {
       drupal_set_message(t('An error has occurred adding the content type %type.<br/>Please check the errors displayed for more details.', array(
            '%type' => $imported_type_name
            )));
       return;
    }
  }

  // Create the groups for this type, if they don't already exist.
  if (module_exists('fieldgroup') && $imported_groups) {
    foreach ($imported_groups as $group) {
      $group_name = $group['group_name'];
      fieldgroup_save_group($type_name, $group);
    }
    // Reset the static variable in fieldgroup_groups() with new data.
    fieldgroup_groups('', FALSE, TRUE);
  }

  // Iterate through the field forms in the import and execute each.
  $rebuild = FALSE;
  foreach ($imported_fields as $field) {

    // Make sure the field doesn't already exist in the type.
    // If so, do nothing, fields can't be duplicated within a content type.
    $field_name   = $field['field_name'];

    // Might need to overwrite the content type name if a new type was created.
    $field['type_name'] = $type_name;

    if (!empty($field['field_name']) && isset($content_info['content types'][$type_name]['fields'][$field_name])) {
      if($form_state['do_update']){
        $field = content_field_instance_update($field, FALSE);
        $rebuild = TRUE;
        drupal_set_message(t('The field %field_label (%field_name) was updated', array(
        '%field_label' => $field['widget']['label'], '%field_name' => $field_name)));
      }
      else{
         drupal_set_message(t('The imported field %field_label (%field_name) was not added to %type because that field already exists in %type.', array(
          '%field_label' => $field['label'], '%field_name' => $field_name, '%type' => $type_label)));
      }
    }
    else {
      $field = content_field_instance_create($field, FALSE);
      $rebuild = TRUE;
      drupal_set_message(t('The field %field_label (%field_name) was added to the content type %type.', array(
        '%field_label' => $field['widget']['label'], '%field_name' => $field_name, '%type' => $type_label)));
    }

    // Fieldgroup module erases all group related data when a module that
    // provides a content type is disabled, but CCK does not remove the fields.
    // In this case, we should ensure group data related to fields is properly
    // restored. Hence, we need to update field group data for newly imported
    // field, but also for fields that already exist.
    if (module_exists('fieldgroup') && isset($imported_groups)) {
      fieldgroup_update_fields($field);
    }
  }

  // Clear caches and rebuild menu only if any field has been created.
  if ($rebuild) {
    content_clear_type_cache(TRUE);
    menu_rebuild();
  }

  // Import weights of non-CCK fields.
  if (isset($content['extra'])) {
    variable_set('content_extra_weights_'. $type_name, $content['extra']);
  }
}

/**
 * delete block with passed in values
 * if you omit theme it will delete the block in all themes
 */
function digitaria_utility_block_delete($delta){

  module_load_include('inc', 'block', 'block.admin');

  $form = array();
  $form_state = array();
  $form_state['values']['bid'] = $delta;
  $form_state['values']['info'] = '';
  block_box_delete_submit($form, $form_state);
}

/**
 * update block region with passed in values
 * if you omit theme it will delete the block in all themes
 */
function digitaria_utility_block_update_region($region, $module, $delta, $theme = null){
  $where = " where module = '" . $module . "' and delta = '" . $delta . "' ";
  if(!empty($theme)){
    $where .= "and theme = '" . $theme . "' ";
  }
  db_query("UPDATE {blocks} SET region = '%s' " . $where, $region);
}

/**
 * Get all files within a directory as an array.
 */
function digitaria_utility_get_directory_list($directory) {
    // create an array to hold directory list
    $results = array();

    // create a handler for the directory
    $handler = opendir($directory);

    // open directory and walk through the filenames
    while ($file = readdir($handler)) {
      // if file isn't a directory
      if (!is_dir($directory . '/' . $file)) {
        $results[] = $file;
      }

    }

    // tidy up: close the handler
    closedir($handler);

    return $results;
}
