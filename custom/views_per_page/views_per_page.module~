<?php

/**
 * Checks the query string and the session to see what the current pager count is.
 *
 * @param string $session_pager_key The string to identify the pager count for this page.
 * @return A number of rows per page.
 */
function views_per_page_get_pager_count($session_pager_key, $default) {
  if (isset($_GET['show_all'])) {
    return 0;
  }
  if (isset($_GET['per_page'])) {
    $pager_limit = ($_GET['per_page'] == 'All') ? 0 : $_GET['per_page'] + 0;
    $_SESSION[$session_pager_key] = $pager_limit;
  } else {
    $pager_limit = isset($_SESSION[$session_pager_key]) ? ($_SESSION[$session_pager_key] + 0) : $default;  // default 6
  }

  return $pager_limit;
} 

function views_per_page_get_pager_offset($session_pager_key, $default) {
  if (isset($_GET['show_all'])) {
    return 0;
  }
  if (isset($_GET['offset'])) {
    $offset = ($_GET['offset'] == 'All') ? 0 : $_GET['offset'] + 0;
    $_SESSION[$session_pager_offset] = $offset;
  } else {
    $offset = isset($_SESSION[$session_pager_offset]) ? ($_SESSION[$session_pager_offset] + 0) : $default;  // default 6
  }

  return $offset;
} 


function views_per_page_views_query_alter(&$view, &$query) {
//echo '<pre>'; print_r($view); echo '</pre>';
if($view->name == 'video_gallery_list'){
//kpr($view);



if($view->exposed_input['type']){
  //foreach($view->exposed_input['type'] as $type => $value){}

}


}

}


/**
 * Implements hook_views_pre_execute().
 *
 * This allows us to adjust the number of rows to present, and to add the pager
 * count display functionality.
 *
 * @param stdClass $view The view to alter.
 */
function views_per_page_views_pre_execute(&$view) {
  switch($view->name) {
    case 'video_gallery_list':
    case 'blog':
    case 'author_blogs':
    case 'tag_blogs':
    case 'blog_archive_browser':
    case 'tweets':
    case 'press_release_listing':
    case 'event':
    case 'licensing':
    case 'doc_center':
    case 'stories':

      $pager_limit = views_per_page_get_pager_count('pager_count_'.$view->name, $view->pager['items_per_page']);
      $pager_offset = views_per_page_get_pager_offset('offset_count_'.$view->name, $view->pager['offset']);
      $view->pager['items_per_page'] = $pager_limit;
      $view->handler->options['items_per_page'] = $pager_limit;
      $view->pager['offset'] = $pager_offset;

      break;
  }
}

function views_per_page_theme() {
  return array(
    'paginator_size' => array(
      'arguments' => array('available' => array(3, 6, 9, 12, 15, 18, 21, 24, 30, 'All'))
    )
  );
}

function theme_paginator_size($view_name, $available = array(3, 6, 9, 12, 15, 18, 21, 24, 30, 'All'), $default = 6) {
  $current = views_per_page_get_pager_count('pager_count_'.$view_name, $default);
  $current = ($current == 0) ? 'All' : $current;
  $output = '<div class="generic_paginator_size">';
  $output .= '<span class="generic_paginator_view_title">' . t('View') . '</span>';
  $output .= '<span class="generic_faux_dropdown_value">'.$current.'</span>';
  $output .= '<ul class="generic_faux_dropdown_drop">';

  foreach ($available as $value) {
    $temp_query = $_GET;
    unset($temp_query['q']);
    $temp_query['per_page'] = $value;
    $output .= '<li>' . l($value, drupal_get_path_alias($_GET['q']), array('query' => $temp_query, 'attributes' => array('class' => 'active'))) . '</li>';
  }
  $output .= '</ul>';
  $output .= '<span class="generic_paginator_view_subtitle">' . t('Per Page') . '</span>';
  $output .= '</div>';
  return $output;
}
