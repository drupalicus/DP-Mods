<?php
/**
 * Implementation of hook_menu
 */
function content_podgroup_draggable_menu() {
  $items = array();
  $items['content_podgroup_draggable/js/submit'] = array(
    'page callback' => 'content_podgroup_draggable_js_submit',
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
    'file' => 'content_podgroup_draggable.inc',
  );
  return $items;
}
/**
 * Implementation of hook_nodeapi().
 */
function content_podgroup_draggable_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    //add the widget to node pages if user has edit access and node has podgroups
    case 'view':
      if(node_access('update', $node) && content_podgroup_draggable_has_podgroups($node->nid) && arg(2) != 'edit' && arg(2) != 'clone'){
        drupal_add_css(drupal_get_path('module', 'content_podgroup_draggable') . '/styles/content_podgroups_draggable.css');
        drupal_add_js(drupal_get_path('module', 'content_podgroup_draggable') . '/scripts/common.js');
        drupal_add_js(drupal_get_path('module', 'content_podgroup_draggable') . '/scripts/dragdrop.js');
      }

      break;

  }
}

/**
 * callback for control panel block
 */
function content_podgroup_draggable_block_control_panel() {
  //only show control panel is on a node page and node has podgroups 
  //and user has permission to edit the node
  if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == ''){
    $node = node_load(arg(1));
    if(node_access('update', $node) && content_podgroup_draggable_has_podgroups($node->nid)){
      $control_panel = theme('content_podgroup_draggable_control_panel');

      //Add node nid as js setting
      drupal_add_js(array('content_podgroup_draggable' => array('nid' => arg(1))), 'setting');

      return $control_panel;
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function content_podgroup_draggable_theme() {
  return array(
    'content_podgroup_draggable_control_panel' => array(
      'arguments' => array('element' => NULL),
      'template' => 'content-podgroup-draggable--control-panel',
    ),
  );
}

/**
 * tells whether a node has podgroups or not, based on passed in $nid
 */
function content_podgroup_draggable_has_podgroups($nid){
  static $has_podgroups = array();

  if (!isset($has_podgroups[$nid])) {
    $has_podgroups[$nid] = false;

    $sql = "SELECT distinct n.nid
            FROM content_group cg
            JOIN node n ON n.type = cg.type_name
            WHERE group_type = 'podgroup'
            and n.nid = %d";

    $result = db_result(db_query($sql, $nid));
    if(!empty($result)){
      $has_podgroups[$nid] = true;
    }
  }
  
  return $has_podgroups[$nid];
}

/**
 * Preprocess function for podgroups.
 */
function content_podgroup_draggable_preprocess_page(&$vars) {

  // Add the draggable control widget to the $closure section 
  $vars['closure'] .= content_podgroup_draggable_block_control_panel();
}

/**
 * Preprocess function for podgroups.
 */
function content_podgroup_draggable_preprocess_content_podgroup(&$vars) {
  //if edit mode is on add required hidden vars to each podgroup
  if($_COOKIE['edit-mode'] == 'on'){
    $class = 'cpd_' . $vars['element']['#region'] . '|' . $vars['element']['#group_name'] . '|' . $vars['element']['#delta'];

    $vars['children'] = '
      <input type="hidden" id="' . $class . '|region" class="cpd_region" value="' . $vars['element']['#region'] . '" />
      <input type="hidden" id="' . $class . '|group_name" class="cpd_group_name" value="' . $vars['element']['#group_name'] . '" />
      <input type="hidden" id="' . $class . '|delta" class="cpd_delta" value="' . $vars['element']['#delta'] . '" />
    ' . $vars['children'];
  }
}

