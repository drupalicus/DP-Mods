<?php


/**
 * Implementation of hook_nodeapi().
 */
function disclaimer_nodeapi(&$node, $op) {
  // We want to add every loaded node to the 'disclaimer' list
  if ($op == 'load') {
    disclaimer_add_nids(array($node->nid));
  }
}


/**
 * Implementation of hook_views_default_views().
 */
function disclaimer_views_default_views() {
  return views_install_view_dir('disclaimer');
}


/**
 * Implementation of hook_theme().
 */
function disclaimer_theme() {
  return array(
    'block_disclaimer_footer' => array(
      'template' => 'block-disclaimer_footer',
      'arguments' => array(
        'content'  => NULL,
      ),
    ),
    'block_disclaimer_footer_row' => array(
      'template' => 'block-disclaimer_footer-row',
      'arguments' => array(
        'prefix'   => NULL,
        'content'  => NULL,
      ),
    ),
  );
}


/**
 * Implementation of hook_block().
 */
function disclaimer_block($op = 'list', $delta = 0, $edit = array()) {
  $return = array();

  switch ($op) {

    // -- LIST --
    case 'list':
      $return['disclaimer_footer'] = array(
        'info'    => t('Disclaimer: Footer'),
        'weight'  => 100,
        'status'  => 1,
        //'region'  => 'footer',
        //'cache'   => BLOCK_CACHE_PER_PAGE,
      );
      break;

    // -- VIEW --
    case 'view':
      switch($delta) {

        case 'disclaimer_footer':
          $return = disclmaimer_block_footer();
          break 2;
      }
      break;

    // -- CONFIGURE --
    case 'configure':
      break;

    // -- SAVE --
    case 'save':
      break;
  }

  return $return;
}


/**
 * Block Calblack: Disclaimer Footer Block
 *
 * @return Array containing block Subject and Content
 */
function disclmaimer_block_footer() {
  $nids  = array();
  $block = array(
    'subject' => NULL,
    'content' => NULL,
  );

  // Get the nids from the disclaimer registry
  // Allowing other modules to add disclaimers
  $reg_nids = disclaimer_add_nids();
  if (!empty($reg_nids)) {
    $nids = array_merge($nids, $reg_nids);
  }

  // Allow other modules to alter related disclaimer nid list
  foreach (module_implements('disclaimer_add_related') as $module) {
    $function = $module . '_disclaimer_add_related';
    $function($nids);
  }

  // Return empty if we have no nids
  if (empty($nids)) {
    return array();
  }

  // Get Array of disclaimer nodes
  $disclaimer_nids = _disclaimer_process_related_nids($nids);

  // Allow other modules to alter disclaimers nid list
  foreach (module_implements('disclaimer_add_disclaimer') as $module) {
    $function = $module . '_disclaimer_add_disclaimer';
    $function($disclaimer_nids);
  }

  // Theme the Disclaimers
  $disclaimer_rows = _disclaimer_theme_disclaimers($disclaimer_nids);

  // Apply the block theme and set the block content
  $block['content'] = theme('block_disclaimer_footer', implode('',$disclaimer_rows));

  return $block;
}


/**
 * Local Subroutine
 *
 * Get the disclaimer nids from array of related nids
 *
 * @param Array of nids
 * @return Array of disclaimers nids
 */
function _disclaimer_process_related_nids($nids = array()) {
  $nodes  = array();

  // Do nothing if we have no nids to process
  if (empty($nids)) {
    return array();
  }

  // Get the disclaimer nodes
  // We already know this is used in multiple content types
  // So we don't have to have a big nasty query to account for
  // db_storage=0 in content_node_field_instance
  $query = db_query('
    SELECT dn.nid AS nid
    FROM {node} sn
    JOIN {content_field_disclaimer} df ON sn.vid = df.vid
    JOIN {node} dn ON df.field_disclaimer_nid = dn.nid
    JOIN {content_type_disclaimer} dc ON dn.vid = dc.vid
    WHERE sn.nid IN (' . db_placeholders($nids) . ')
    ORDER BY dc.field_disclaimer_weight_value ASC',
    $nids);
  while ($row = db_fetch_array($query)) {
    if (!array_key_exists($row['nid'], $nodes)) {
      // Key by disclaimer NID to prevent duplicates
      $nodes[$row['nid']] = $row['nid'];
    }
  }
  return $nodes;
}


/**
 * Local Subroutine
 *
 * Get the desclaimer nids from each of the passed nids
 * Return list of disclaimers as Array
 *
 * @param Array of nids
 * @return Array of disclaimers
 */
function _disclaimer_get_disclaimer_data($nids) {
  $nodes  = array();

  // Do nothing if we have no nids to process
  if (empty($nids)) {
    return array();
  }

  // Get the disclaimer nodes
  // We already know this is used in multiple content types
  // So we don't have to have a big nasty query to account for
  // db_storage=0 in content_node_field_instance
  $query = db_query('
    SELECT n.nid AS nid, nr.body AS body, dc.field_disclaimer_prefix_value AS prefix
    FROM {node} n
    JOIN {node_revisions} nr ON n.vid = nr.vid
    JOIN {content_type_disclaimer} dc ON n.vid = dc.vid
    WHERE n.nid IN (' . db_placeholders($nids) . ')
    ORDER BY dc.field_disclaimer_weight_value ASC',
    $nids);

  while ($row = db_fetch_array($query)) {
    if (!array_key_exists($row['nid'], $nodes)) {
      // Key by disclaimer NID to prevent duplicates
      $nodes[$row['nid']] = $row;
    }
  }
  return $nodes;
}


/**
 * Theme the Disclaimer Nodes
 */
function _disclaimer_theme_disclaimers($disclaimer_nids) {
  $return = array();
  $prefix = NULL;

  // Get data for disclaimer nids
  $nodes = _disclaimer_get_disclaimer_data($disclaimer_nids);

  // Theme the disclaimer nodes
  foreach ($nodes as $nid => $row) {
    if (!empty($row['prefix'])) {
      $prefix .= '&dagger;';
      $row['prefix'] = $prefix . '&nbsp;';
    }
    else {
      $row['prefix'] = NULL;
    }
    $return[$nid] = theme('block_disclaimer_footer_row', $row['prefix'], t($row['body']));
  }
  return $return;
}


/**
 * Implementation of hook_disclaimer_add_disclaimer().
 *
 * Special cases configured in the disclaimer
 * admin section are added via this hook.
 */
function disclaimer_disclaimer_add_disclaimer(&$nids) {
  $config = disclaimer_get_config();

  // Add nids for each content type
  foreach ($config as $cfg) {
    if (1 == $cfg['status'] && preg_match('/' . $cfg['path'] . '/', request_uri())) {
      foreach ($cfg['nids'] as $nid) {
        $nids[$nid] = $nid;
      }
    }
  }
}


/**
 * Get Disclaimer Config
 *
 * Configuration values saved to the DB are returned
 * as array.
 *
 * Result Example:
 *   array(
 *     'blog_pages' => array(
 *       'status' => 1,
 *       'desc' => 'Add these disclaimers to every blog page',
 *       'path' => 'blog.*',
 *       'nids' => array(123, 818, 12341)
 *     )
 *   )
 */
function disclaimer_get_config() {
  // @TODO: Get settings from DB
  //return array('blog_pages' => array('status' => 1, 'path' => '^\/blog.*$', 'nids' => array(9755)));
  return array();
}



/**
 * Global Function
 *
 * Add nids to the disclaimer module registry
 * Sometimes hook_disclaimer just doesn't cut it
 * For those occasions you can add nid's here
 *
 * @param Array of nids to add
 * @return Array of all nids that will be added
 */
function disclaimer_add_nids($nids = array()) {
  static $disclaimer_nids = array();

  if (!empty($nids)) {
    $disclaimer_nids = array_merge($disclaimer_nids, $nids);
  }

  return $disclaimer_nids;
}

